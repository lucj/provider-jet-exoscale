/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatabaseObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	DiskSize *int64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	NodeCpus *int64 `json:"nodeCpus,omitempty" tf:"node_cpus,omitempty"`

	NodeMemory *int64 `json:"nodeMemory,omitempty" tf:"node_memory,omitempty"`

	Nodes *int64 `json:"nodes,omitempty" tf:"nodes,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type DatabaseParameters struct {

	// +kubebuilder:validation:Optional
	Kafka []KafkaParameters `json:"kafka,omitempty" tf:"kafka,omitempty"`

	// +kubebuilder:validation:Optional
	MaintenanceDow *string `json:"maintenanceDow,omitempty" tf:"maintenance_dow,omitempty"`

	// +kubebuilder:validation:Optional
	MaintenanceTime *string `json:"maintenanceTime,omitempty" tf:"maintenance_time,omitempty"`

	// +kubebuilder:validation:Optional
	Mysql []MysqlParameters `json:"mysql,omitempty" tf:"mysql,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Pg []PgParameters `json:"pg,omitempty" tf:"pg,omitempty"`

	// +kubebuilder:validation:Required
	Plan *string `json:"plan" tf:"plan,omitempty"`

	// +kubebuilder:validation:Optional
	Redis []RedisParameters `json:"redis,omitempty" tf:"redis,omitempty"`

	// +kubebuilder:validation:Optional
	TerminationProtection *bool `json:"terminationProtection,omitempty" tf:"termination_protection,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	Zone *string `json:"zone" tf:"zone,omitempty"`
}

type KafkaObservation struct {
}

type KafkaParameters struct {

	// +kubebuilder:validation:Optional
	EnableCertAuth *bool `json:"enableCertAuth,omitempty" tf:"enable_cert_auth,omitempty"`

	// +kubebuilder:validation:Optional
	EnableKafkaConnect *bool `json:"enableKafkaConnect,omitempty" tf:"enable_kafka_connect,omitempty"`

	// +kubebuilder:validation:Optional
	EnableKafkaRest *bool `json:"enableKafkaRest,omitempty" tf:"enable_kafka_rest,omitempty"`

	// +kubebuilder:validation:Optional
	EnableSaslAuth *bool `json:"enableSaslAuth,omitempty" tf:"enable_sasl_auth,omitempty"`

	// +kubebuilder:validation:Optional
	EnableSchemaRegistry *bool `json:"enableSchemaRegistry,omitempty" tf:"enable_schema_registry,omitempty"`

	// +kubebuilder:validation:Optional
	IPFilter []*string `json:"ipFilter,omitempty" tf:"ip_filter,omitempty"`

	// +kubebuilder:validation:Optional
	KafkaConnectSettings *string `json:"kafkaConnectSettings,omitempty" tf:"kafka_connect_settings,omitempty"`

	// +kubebuilder:validation:Optional
	KafkaRestSettings *string `json:"kafkaRestSettings,omitempty" tf:"kafka_rest_settings,omitempty"`

	// +kubebuilder:validation:Optional
	KafkaSettings *string `json:"kafkaSettings,omitempty" tf:"kafka_settings,omitempty"`

	// +kubebuilder:validation:Optional
	SchemaRegistrySettings *string `json:"schemaRegistrySettings,omitempty" tf:"schema_registry_settings,omitempty"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type MysqlObservation struct {
}

type MysqlParameters struct {

	// +kubebuilder:validation:Optional
	AdminPasswordSecretRef *v1.SecretKeySelector `json:"adminPasswordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	AdminUsername *string `json:"adminUsername,omitempty" tf:"admin_username,omitempty"`

	// +kubebuilder:validation:Optional
	BackupSchedule *string `json:"backupSchedule,omitempty" tf:"backup_schedule,omitempty"`

	// +kubebuilder:validation:Optional
	IPFilter []*string `json:"ipFilter,omitempty" tf:"ip_filter,omitempty"`

	// +kubebuilder:validation:Optional
	MysqlSettings *string `json:"mysqlSettings,omitempty" tf:"mysql_settings,omitempty"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type PgObservation struct {
}

type PgParameters struct {

	// +kubebuilder:validation:Optional
	AdminPasswordSecretRef *v1.SecretKeySelector `json:"adminPasswordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	AdminUsername *string `json:"adminUsername,omitempty" tf:"admin_username,omitempty"`

	// +kubebuilder:validation:Optional
	BackupSchedule *string `json:"backupSchedule,omitempty" tf:"backup_schedule,omitempty"`

	// +kubebuilder:validation:Optional
	IPFilter []*string `json:"ipFilter,omitempty" tf:"ip_filter,omitempty"`

	// +kubebuilder:validation:Optional
	PgSettings *string `json:"pgSettings,omitempty" tf:"pg_settings,omitempty"`

	// +kubebuilder:validation:Optional
	PgbouncerSettings *string `json:"pgbouncerSettings,omitempty" tf:"pgbouncer_settings,omitempty"`

	// +kubebuilder:validation:Optional
	PglookoutSettings *string `json:"pglookoutSettings,omitempty" tf:"pglookout_settings,omitempty"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type RedisObservation struct {
}

type RedisParameters struct {

	// +kubebuilder:validation:Optional
	IPFilter []*string `json:"ipFilter,omitempty" tf:"ip_filter,omitempty"`

	// +kubebuilder:validation:Optional
	RedisSettings *string `json:"redisSettings,omitempty" tf:"redis_settings,omitempty"`
}

// DatabaseSpec defines the desired state of Database
type DatabaseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatabaseParameters `json:"forProvider"`
}

// DatabaseStatus defines the observed state of Database.
type DatabaseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Database is the Schema for the Databases API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,exoscalejet}
type Database struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseSpec   `json:"spec"`
	Status            DatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseList contains a list of Databases
type DatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Database `json:"items"`
}

// Repository type metadata.
var (
	Database_Kind             = "Database"
	Database_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Database_Kind}.String()
	Database_KindAPIVersion   = Database_Kind + "." + CRDGroupVersion.String()
	Database_GroupVersionKind = CRDGroupVersion.WithKind(Database_Kind)
)

func init() {
	SchemeBuilder.Register(&Database{}, &DatabaseList{})
}
