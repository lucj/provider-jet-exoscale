/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NodepoolObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	InstancePoolID *string `json:"instancePoolId,omitempty" tf:"instance_pool_id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type NodepoolParameters struct {

	// +kubebuilder:validation:Optional
	AntiAffinityGroupIds []*string `json:"antiAffinityGroupIds,omitempty" tf:"anti_affinity_group_ids,omitempty"`

	// +crossplane:generate:reference:type=Cluster
	// +crossplane:generate:reference:refFieldName=ClusterIdRef
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ClusterIdRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DeployTargetID *string `json:"deployTargetId,omitempty" tf:"deploy_target_id,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DiskSize *int64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// +kubebuilder:validation:Optional
	InstancePrefix *string `json:"instancePrefix,omitempty" tf:"instance_prefix,omitempty"`

	// +kubebuilder:validation:Required
	InstanceType *string `json:"instanceType" tf:"instance_type,omitempty"`

	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateNetworkIds []*string `json:"privateNetworkIds,omitempty" tf:"private_network_ids,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroupIdRefs []v1.Reference `json:"securityGroupIdRefs,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SecurityGroupIdSelector *v1.Selector `json:"securityGroupIdSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/lucj/provider-jet-exoscale/apis/securitygroup/v1alpha1
	// +crossplane:generate:reference:refFieldName=SecurityGroupIdRefs
	// +crossplane:generate:reference:selectorFieldName=SecurityGroupIdSelector
	// +kubebuilder:validation:Optional
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// +kubebuilder:validation:Required
	Size *int64 `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Taints map[string]*string `json:"taints,omitempty" tf:"taints,omitempty"`

	// +kubebuilder:validation:Required
	Zone *string `json:"zone" tf:"zone,omitempty"`
}

// NodepoolSpec defines the desired state of Nodepool
type NodepoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NodepoolParameters `json:"forProvider"`
}

// NodepoolStatus defines the observed state of Nodepool.
type NodepoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NodepoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Nodepool is the Schema for the Nodepools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,exoscalejet}
type Nodepool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NodepoolSpec   `json:"spec"`
	Status            NodepoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NodepoolList contains a list of Nodepools
type NodepoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Nodepool `json:"items"`
}

// Repository type metadata.
var (
	Nodepool_Kind             = "Nodepool"
	Nodepool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Nodepool_Kind}.String()
	Nodepool_KindAPIVersion   = Nodepool_Kind + "." + CRDGroupVersion.String()
	Nodepool_GroupVersionKind = CRDGroupVersion.WithKind(Nodepool_Kind)
)

func init() {
	SchemeBuilder.Register(&Nodepool{}, &NodepoolList{})
}
